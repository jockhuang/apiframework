<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		                   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
		                   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		                   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		                   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<aop:aspectj-autoproxy />
	<context:property-placeholder location="classpath*:*-conf.properties" />
	<context:component-scan base-package="com.specl.api.controller" />
	<tx:annotation-driven />
	<!-- 分库事务切面逻辑 -->
	<bean id="datasourceRouterInterceptor" class="com.specl.api.aop.DataSourceInterceptor" />
	
	<bean id="commonDataSourceProperties" abstract="true">
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize">
			<value>5</value>
		</property>

		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>30</value>
		</property>

		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>10</value>
		</property>

		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>5</value>
		</property>

		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>0</value>
		</property>

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>

		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>

		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>

		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>
	<bean id="dataSourceA" parent="commonDataSourceProperties" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.source1.driver}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.source1.url}</value>
		</property>
		<property name="user">
			<value>${jdbc.source1.user}</value>
		</property>
		<property name="password">
			<value>${jdbc.source1.password}</value>
		</property>
	</bean>
	<bean id="dataSourceB" parent="commonDataSourceProperties" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.source2.driver}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.source2.url}</value>
		</property>
		<property name="user">
			<value>${jdbc.source2.user}</value>
		</property>
		<property name="password">
			<value>${jdbc.source2.password}</value>
		</property>
	</bean>


	<bean id="dataSource" class="com.specl.api.sharding.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="order_r_0" value-ref="dataSourceB" />
				<entry key="order_rw_0" value-ref="dataSourceB" />
				<entry key="merchant_r_0" value-ref="dataSourceA" />
				<entry key="merchant_rw_0" value-ref="dataSourceA" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSourceA" />
	</bean>

	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="classpath:sqlmap-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="jtaTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<qualifier value="jtaTx"></qualifier>
	</bean>

	<bean id="singleTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<qualifier value="singleTx"></qualifier>
	</bean>

	<bean id="boardDao" class="com.specl.api.dao.release.BoardDaoRelease">
		<property name="sqlMapClient" ref="sqlMapClient"></property>
	</bean>
	<bean id="mailDao" class="com.specl.api.dao.release.MailDaoRelease">
		<property name="sqlMapClient" ref="sqlMapClient"></property>
	</bean>
	<bean id="cardDao" class="com.specl.api.dao.release.CardDaoRelease">
		<property name="sqlMapClient" ref="sqlMapClient"></property>
	</bean>
	<bean id="boardService" class="com.specl.api.service.release.BoardServiceRelease" />
	<bean id="cardService" class="com.specl.api.service.release.CardServiceRelease" />

	

	<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="customEditors">
			<map>
				<entry key="java.net.SocketAddress">
					<bean class="org.apache.mina.integration.beans.InetSocketAddressEditor" />
				</entry>
			</map>
		</property>
	</bean>

	<bean id="messageCodecFilter" class="org.apache.mina.filter.codec.ProtocolCodecFilter">
		<constructor-arg>
			<bean
				class="org.apache.mina.filter.codec.serialization.ObjectSerializationCodecFactory" />
		</constructor-arg>
	</bean>
	<bean id="loggingFilter" class="org.apache.mina.filter.logging.LoggingFilter" />
	<bean id="executorFilter" class="org.apache.mina.filter.executor.ExecutorFilter">
		<constructor-arg value="1000" />
	</bean>
	<!-- filter chain. -->
	<bean id="filterChainBuilder"
		class="org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder">
		<property name="filters">
			<map>
				<!-- <entry key="loggingFilter" value-ref="loggingFilter" /> -->
				<entry key="codecFilter" value-ref="messageCodecFilter" />
				<entry key="executorFilter" value-ref="executorFilter" />
			</map>
		</property>
	</bean>

	<bean id="ioAcceptor" class="org.apache.mina.transport.socket.nio.NioSocketAcceptor"
		init-method="bind" destroy-method="unbind">
		<property name="defaultLocalAddress" value=":16111" />
		<property name="handler" ref="myHandler" />
		<property name="reuseAddress" value="true" />
		<property name="filterChainBuilder" ref="filterChainBuilder" />
	</bean>

	<!-- The IoHandler implementation -->
	<bean id="myHandler" class="com.specl.api.controller.ServiceProtocolHandler">

	</bean>




</beans> 